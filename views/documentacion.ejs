<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <title>Documentacion del Compilador - GIC</title>
  <link rel="stylesheet" href="/css/documentacion.css">
  <script src="https://cdn.jsdelivr.net/npm/viz.js@2.1.2/viz.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/viz.js@2.1.2/full.render.js"></script>

</head>

<body>
  <h1>Documentacion del Compilador</h1>

  <div class="contenedor">
    <div class="seccion">
      <h2>Expresiones Regulares (ER)</h2>
      <pre>
// IDENTIFICADORES Y LITERALES
Identificador:     [a-zA-Z_][a-zA-Z0-9_]*
Numero entero:     [0-9]+
Numero decimal:    [0-9]+\.[0-9]+
Cadena:           "([^"\\]|\\.)*"
Caracter:         '([^'\\]|\\.)'

// PALABRAS CLAVE
PalabrasClave:    int|float|char|void|if|else|while|for|do|switch|case|break|default|return|printf|scanf

// OPERADORES
OperadorAsignacion:    =|\+=|-=|\*=|/=|%=
OperadorLogico:        &&|\|\||!
OperadorRelacional:    ==|!=|<=|>=|<|>
OperadorAritmetico:    \+|-|\*|/|%
OperadorUnario:        \+\+|--|&|\*|!|\+|-
OperadorAcceso:        \.|->

// DELIMITADORES
Delimitadores:    [;:,(){}\[\]]
Parentesis:       \(|\)
Llaves:          \{|\}
Corchetes:       \[|\]

// PREPROCESADOR
DirectivaPreprocesador: #include|#define
Biblioteca:            <[a-zA-Z_][a-zA-Z0-9_]*\.h>|"[a-zA-Z_][a-zA-Z0-9_]*\.h"

// ESPACIOS Y COMENTARIOS
EspacioBlanco:    [ \t\n\r]+
ComentarioLinea:  //[^\n]*
ComentarioBloque: /\*([^*]|\*+[^*/])*\*+/
      </pre>
    </div>
    <!--automatas-->

  <div class="seccion">
    <h2>Automatas</h2>
    <!--Botones-->
        <div class="controls">
          <button type="submit" class="btn" onclick="mostrarCategoria('identificadores-literales')">Identificadores y literales</button>
          <button type="submit" class="btn" onclick="mostrarCategoria('palabras-clave')">Palabras clave</button>
          <button type="submit" class="btn" onclick="mostrarCategoria('Operador')">Operadores</button>
          <button type="submit" class="btn" onclick="mostrarCategoria('delimitador')">Delimitadores</button>
          <button type="submit" class="btn" onclick="mostrarCategoria('preprocesador')">Directiva de preprocesador</button>
          <button type="submit" class="btn" onclick="mostrarCategoria('espacio-comentario')">Espacios y comentarios</button>
        </div>

        <!-- Identificadores y literales -->
        <div class="categoria identificadores-literales" style="display: none;">
            <div class="automata-container"> 
                <h2> Identificador</h2>
                <p><b>Regex:</b> <code>[a-zA-Z_][a-zA-Z0-9_]*</code></p>
                <div id="AFD_identificador" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Número entero</h2>
                <p><b>Regex:</b> <code>[0-9][0-9]*</code></p>
                <div id="AFD_numeroEntero" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Número decimal</h2>
                <p><b>Regex:</b> <code>[0-9]+\.[0-9]+</code></p>
                <div id="AFD_numeroDecimal" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Cadena</h2>
                <p><b>Regex:</b> <code>"([^"\\]|\\.)*"</code></p>
                <div id="AFD_cadena" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Caracter</h2>
                <p><b>Regex:</b> <code>'([^'\\]|\\.)'</code></p>
                <div id="AFD_caracter" class="svg-center"></div>
            </div>
        </div>
        
        <!--palabras clave-->
        <div class="categoria palabras-clave" style="display: none;">
            <div class="automata-container">
                <h2>Palabra clave</h2>
                <p><b>Regex:</b> <code>int|float|char|void|if|else|while|for|do|switch|case|break|default|return|printf|scanf</code></p>
                <div id="AFD_palabraClave" class="svg-center"></div>
            </div>
        </div>
        <!--operadores-->
        <div class="categoria Operador" style="display: none;">
            <div class="automata-container">
                <h2>Operador asiganación</h2>
                <p><b>Regex:</b> <code>=|\+=|-=|\*=|/=|%=</code></p>
                <div id="AFD_operadorAsignacion" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Operador logico</h2>
                <p><b>Regex:</b> <code>&&|\|\||!</code></p>
                <div id="AFD_operadorLogico" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Operador racional</h2>
                <p><b>Regex:</b> <code>==|!=|<=|>=|<|></code></p>
                <div id="AFD_operadorRacional" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Operador aritmetico</h2>
                <p><b>Regex:</b> <code>=|\+=|-=|\*=|/=|%=</code></p>
                <div id="AFD_operadorAritmetico" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Operador unario</h2>
                <p><b>Regex:</b> <code>\+\+|--|&|\*|!|\+|-</code></p>
                <div id="AFD_operadorUnario" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Operador acceso</h2>
                <p><b>Regex:</b> <code>\.|-></code></p>
                <div id="AFD_operadorAcceso" class="svg-center"></div>
            </div>
        </div>
        <!--Delimitadores-->
        <div class="categoria delimitador" style="display: none;">
            <div class="automata-container">
                <h2>Delimitadores</h2>
                <p><b>Regex:</b> <code>[;:,(){}\[\]]</code></p>
                <div id="AFD_delimitadores" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Parentesis</h2>
                <p><b>Regex:</b> <code>\(|\)</code></p>
                <div id="AFD_parentesis" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Llaves</h2>
                <p><b>Regex:</b> <code>\{|\}</code></p>
                <div id="AFD_llaves" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Corchetes</h2>
                <p><b>Regex:</b> <code>\[|\]</code></p>
                <div id="AFD_corchetes" class="svg-center"></div>
            </div>
        </div>
        <!--Preprocesador-->
        <div class="categoria preprocesador" style="display: none;">
            <div class="automata-container">
                <h2>Directiva preprocesador</h2>
                <p><b>Regex:</b> <code>#include|#define</code></p>
                <div id="AFD_directivaPreprocesador" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Biblioteca</h2>
                <p><b>Regex:</b> <code>&lt;[a-zA-Z_][a-zA-Z0-9_]*\.h&gt;|"[a-zA-Z_][a-zA-Z0-9_]*\.h"</code></p>
                <div id="AFD_biblioteca" class="svg-center"></div>
            </div>
        </div>
        <!-- Espacios y comentarios-->
        <div class="categoria espacio-comentario" style="display: none;">
            <div class="automata-container">
                <h2>Espacio blanco</h2>
                <p><b>Regex:</b> <code>[ \t\n\r]+</code></p>
                <div id="AFD_espacioBlanco" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Comentario linea</h2>
                <p><b>Regex:</b> <code>//[^\n]*</code></p>
                <div id="AFD_comentarioLinea" class="svg-center"></div>
            </div>
            <div class="automata-container">
                <h2>Comentario bloque</h2>
                <p><b>Regex:</b> <code>/\*([^*]|\*+[^*/])*\*+/</code></p>
                <div id="AFD_comentarioBloque" class="svg-center"></div>
            </div>
        </div>
        <script src="/js/automatas.js"></script>
  </div>
  <!--fincontenedor-->
  </div>
  <div class="contenedor">
    <div class="seccion">
      <h2>Gramatica Incontextual (GIC)</h2>
      <pre>
// ESTRUCTURA PRINCIPAL
Programa → Preprocesador Declaraciones FuncionPrincipal OtrasFunciones
Programa → FuncionPrincipal

// PREPROCESADOR
Preprocesador → DirectivaPreprocesador Preprocesador | ε
DirectivaPreprocesador → #include Biblioteca | #define id Valor
Biblioteca → < id . h > | " id . h "
Valor → num | cadena | id

// DECLARACIONES GLOBALES
Declaraciones → Declaracion Declaraciones | ε
Declaracion → DeclaracionVariable | DeclaracionArreglo | DeclaracionPuntero | DeclaracionFuncion

// TIPOS Y VARIABLES
Tipo → TipoBasico Modificador
TipoBasico → int | float | char | void
Modificador → * | ε

DeclaracionVariable → Tipo ListaIdentificadores ;
ListaIdentificadores → id InicializacionOpcional MoreIds
MoreIds → , id InicializacionOpcional MoreIds | ε
InicializacionOpcional → = Expresion | ε

DeclaracionArreglo → Tipo id [ num ] ; | Tipo id [ ] = { ListaValores } ;
ListaValores → Expresion , ListaValores | Expresion

DeclaracionPuntero → Tipo * id ; | Tipo * id = & id ;

// FUNCIONES
FuncionPrincipal → TipoRetorno main ( Parametros ) { CuerpoFuncion Return }
OtrasFunciones → Funcion OtrasFunciones | ε
Funcion → TipoRetorno id ( Parametros ) { CuerpoFuncion ReturnOpcional }
DeclaracionFuncion → TipoRetorno id ( Parametros ) ;

TipoRetorno → int | float | char | void
Parametros → ListaParametros | void | ε
ListaParametros → Parametro , ListaParametros | Parametro
Parametro → Tipo id | Tipo * id | Tipo id [ ]

CuerpoFuncion → DeclaracionesLocales ListaSentencias
DeclaracionesLocales → Declaracion DeclaracionesLocales | ε

Return → return Expresion ; | return ;
ReturnOpcional → Return | ε

// SENTENCIAS
ListaSentencias → Sentencia ListaSentencias | ε
Sentencia → SentenciaSimple | SentenciaControl | BloqueCompuesto

SentenciaSimple → Asignacion ; | LlamadaFuncion ; | ExpresionIncDec ; | ;
SentenciaControl → If | While | For | DoWhile | Switch
BloqueCompuesto → { ListaSentencias }

// ASIGNACIONES
Asignacion → Variable OperadorAsignacion Expresion
Variable → id | id [ Expresion ] | * id | id . id
OperadorAsignacion → = | += | -= | *= | /= | %=

ExpresionIncDec → Variable ++ | Variable -- | ++ Variable | -- Variable

// EXPRESIONES (Jerarquia de operadores)
Expresion → ExpresionLogica
ExpresionLogica → ExpresionLogica || ExpresionAnd | ExpresionAnd
ExpresionAnd → ExpresionAnd && ExpresionIgualdad | ExpresionIgualdad
ExpresionIgualdad → ExpresionIgualdad OperadorIgualdad ExpresionRelacional | ExpresionRelacional
ExpresionRelacional → ExpresionRelacional OperadorRelacional ExpresionAditiva | ExpresionAditiva
ExpresionAditiva → ExpresionAditiva OperadorAditivo ExpresionMultiplicativa | ExpresionMultiplicativa
ExpresionMultiplicativa → ExpresionMultiplicativa OperadorMultiplicativo ExpresionUnaria | ExpresionUnaria
ExpresionUnaria → OperadorUnario ExpresionUnaria | ExpresionPostfija
ExpresionPostfija → ExpresionPrimaria | ExpresionPostfija [ Expresion ] | 
                   ExpresionPostfija ( ArgumentosOpcionales ) | ExpresionPostfija ++ | ExpresionPostfija --
ExpresionPrimaria → id | num | caracter | cadena | ( Expresion )

// OPERADORES
OperadorIgualdad → == | !=
OperadorRelacional → < | > | <= | >=
OperadorAditivo → + | -
OperadorMultiplicativo → * | / | %
OperadorUnario → + | - | ! | * | &

// ESTRUCTURAS DE CONTROL
If → if ( Condicion ) Sentencia ElseOpcional
ElseOpcional → else Sentencia | ε

While → while ( Condicion ) Sentencia

For → for ( InicializacionFor ; CondicionFor ; ActualizacionFor ) Sentencia
InicializacionFor → Asignacion | DeclaracionVariable | ε
CondicionFor → Condicion | ε
ActualizacionFor → Asignacion | ExpresionIncDec | ε

DoWhile → do Sentencia while ( Condicion ) ;

Switch → switch ( Expresion ) { ListaCasos CasoDefaultOpcional }
ListaCasos → Caso ListaCasos | ε
Caso → case Expresion : ListaSentencias BreakOpcional
CasoDefaultOpcional → default : ListaSentencias | ε
BreakOpcional → break ; | ε

Condicion → Expresion

// LLAMADAS A FUNCIONES
LlamadaFuncion → id ( ArgumentosOpcionales )
ArgumentosOpcionales → ListaArgumentos | ε
ListaArgumentos → Argumento , ListaArgumentos | Argumento
Argumento → Expresion

// FUNCIONES DE E/S
Print → printf ( FormatoCadena ArgumentosOpcionales )
Scanf → scanf ( FormatoCadena , DireccionVariable )
FormatoCadena → cadena
DireccionVariable → & Variable | Variable
      </pre>
    </div>

    <div class="seccion">
      <h2>BNF (Backus-Naur Form)</h2>
      <pre>
&lt;Programa&gt; ::= &lt;Preprocesador&gt; &lt;Declaraciones&gt; &lt;FuncionPrincipal&gt; &lt;OtrasFunciones&gt; | &lt;FuncionPrincipal&gt;
&lt;Preprocesador&gt; ::= &lt;DirectivaPreprocesador&gt; &lt;Preprocesador&gt; | ε
&lt;DirectivaPreprocesador&gt; ::= "#include" &lt;Biblioteca&gt; | "#define" &lt;id&gt; &lt;Valor&gt;
&lt;Biblioteca&gt; ::= "&lt;" &lt;id&gt; "." "h" "&gt;" | """ &lt;id&gt; "." "h" """
&lt;Valor&gt; ::= &lt;num&gt; | &lt;cadena&gt; | &lt;id&gt;

&lt;Declaraciones&gt; ::= &lt;Declaracion&gt; &lt;Declaraciones&gt; | ε
&lt;Declaracion&gt; ::= &lt;DeclaracionVariable&gt; | &lt;DeclaracionArreglo&gt; | &lt;DeclaracionPuntero&gt; | &lt;DeclaracionFuncion&gt;

&lt;Tipo&gt; ::= &lt;TipoBasico&gt; &lt;Modificador&gt;
&lt;TipoBasico&gt; ::= "int" | "float" | "char" | "void"
&lt;Modificador&gt; ::= "*" | ε

&lt;DeclaracionVariable&gt; ::= &lt;Tipo&gt; &lt;ListaIdentificadores&gt; ";"
&lt;ListaIdentificadores&gt; ::= &lt;id&gt; &lt;InicializacionOpcional&gt; &lt;MoreIds&gt;
&lt;MoreIds&gt; ::= "," &lt;id&gt; &lt;InicializacionOpcional&gt; &lt;MoreIds&gt; | ε
&lt;InicializacionOpcional&gt; ::= "=" &lt;Expresion&gt; | ε

&lt;FuncionPrincipal&gt; ::= &lt;TipoRetorno&gt; "main" "(" &lt;Parametros&gt; ")" "{" &lt;CuerpoFuncion&gt; &lt;Return&gt; "}"
&lt;TipoRetorno&gt; ::= "int" | "float" | "char" | "void"
&lt;Parametros&gt; ::= &lt;ListaParametros&gt; | "void" | ε
&lt;ListaParametros&gt; ::= &lt;Parametro&gt; "," &lt;ListaParametros&gt; | &lt;Parametro&gt;
&lt;Parametro&gt; ::= &lt;Tipo&gt; &lt;id&gt; | &lt;Tipo&gt; "*" &lt;id&gt; | &lt;Tipo&gt; &lt;id&gt; "[" "]"

&lt;CuerpoFuncion&gt; ::= &lt;DeclaracionesLocales&gt; &lt;ListaSentencias&gt;
&lt;ListaSentencias&gt; ::= &lt;Sentencia&gt; &lt;ListaSentencias&gt; | ε
&lt;Sentencia&gt; ::= &lt;SentenciaSimple&gt; | &lt;SentenciaControl&gt; | &lt;BloqueCompuesto&gt;

&lt;SentenciaSimple&gt; ::= &lt;Asignacion&gt; ";" | &lt;LlamadaFuncion&gt; ";" | &lt;ExpresionIncDec&gt; ";" | ";"
&lt;SentenciaControl&gt; ::= &lt;If&gt; | &lt;While&gt; | &lt;For&gt; | &lt;DoWhile&gt; | &lt;Switch&gt;

&lt;Asignacion&gt; ::= &lt;Variable&gt; &lt;OperadorAsignacion&gt; &lt;Expresion&gt;
&lt;Variable&gt; ::= &lt;id&gt; | &lt;id&gt; "[" &lt;Expresion&gt; "]" | "*" &lt;id&gt; | &lt;id&gt; "." &lt;id&gt;
&lt;OperadorAsignacion&gt; ::= "=" | "+=" | "-=" | "*=" | "/=" | "%="

&lt;Expresion&gt; ::= &lt;ExpresionLogica&gt;
&lt;ExpresionLogica&gt; ::= &lt;ExpresionLogica&gt; "||" &lt;ExpresionAnd&gt; | &lt;ExpresionAnd&gt;
&lt;ExpresionAnd&gt; ::= &lt;ExpresionAnd&gt; "&amp;&amp;" &lt;ExpresionIgualdad&gt; | &lt;ExpresionIgualdad&gt;
&lt;ExpresionIgualdad&gt; ::= &lt;ExpresionIgualdad&gt; &lt;OperadorIgualdad&gt; &lt;ExpresionRelacional&gt; | &lt;ExpresionRelacional&gt;
&lt;ExpresionRelacional&gt; ::= &lt;ExpresionRelacional&gt; &lt;OperadorRelacional&gt; &lt;ExpresionAditiva&gt; | &lt;ExpresionAditiva&gt;
&lt;ExpresionAditiva&gt; ::= &lt;ExpresionAditiva&gt; &lt;OperadorAditivo&gt; &lt;ExpresionMultiplicativa&gt; | &lt;ExpresionMultiplicativa&gt;
&lt;ExpresionMultiplicativa&gt; ::= &lt;ExpresionMultiplicativa&gt; &lt;OperadorMultiplicativo&gt; &lt;ExpresionUnaria&gt; | &lt;ExpresionUnaria&gt;
&lt;ExpresionUnaria&gt; ::= &lt;OperadorUnario&gt; &lt;ExpresionUnaria&gt; | &lt;ExpresionPostfija&gt;
&lt;ExpresionPostfija&gt; ::= &lt;ExpresionPrimaria&gt; | &lt;ExpresionPostfija&gt; "[" &lt;Expresion&gt; "]" | 
                        &lt;ExpresionPostfija&gt; "(" &lt;ArgumentosOpcionales&gt; ")" | &lt;ExpresionPostfija&gt; "++" | &lt;ExpresionPostfija&gt; "--"
&lt;ExpresionPrimaria&gt; ::= &lt;id&gt; | &lt;num&gt; | &lt;caracter&gt; | &lt;cadena&gt; | "(" &lt;Expresion&gt; ")"

&lt;OperadorIgualdad&gt; ::= "==" | "!="
&lt;OperadorRelacional&gt; ::= "&lt;" | "&gt;" | "&lt;=" | "&gt;="
&lt;OperadorAditivo&gt; ::= "+" | "-"
&lt;OperadorMultiplicativo&gt; ::= "*" | "/" | "%"
&lt;OperadorUnario&gt; ::= "+" | "-" | "!" | "*" | "&amp;"

&lt;If&gt; ::= "if" "(" &lt;Condicion&gt; ")" &lt;Sentencia&gt; &lt;ElseOpcional&gt;
&lt;ElseOpcional&gt; ::= "else" &lt;Sentencia&gt; | ε
&lt;While&gt; ::= "while" "(" &lt;Condicion&gt; ")" &lt;Sentencia&gt;
&lt;For&gt; ::= "for" "(" &lt;InicializacionFor&gt; ";" &lt;CondicionFor&gt; ";" &lt;ActualizacionFor&gt; ")" &lt;Sentencia&gt;
&lt;DoWhile&gt; ::= "do" &lt;Sentencia&gt; "while" "(" &lt;Condicion&gt; ")" ";"
&lt;Switch&gt; ::= "switch" "(" &lt;Expresion&gt; ")" "{" &lt;ListaCasos&gt; &lt;CasoDefaultOpcional&gt; "}"

&lt;LlamadaFuncion&gt; ::= &lt;id&gt; "(" &lt;ArgumentosOpcionales&gt; ")"
&lt;ArgumentosOpcionales&gt; ::= &lt;ListaArgumentos&gt; | ε
&lt;ListaArgumentos&gt; ::= &lt;Argumento&gt; "," &lt;ListaArgumentos&gt; | &lt;Argumento&gt;
&lt;Argumento&gt; ::= &lt;Expresion&gt;
      </pre>
    </div>

    <div class="seccion">
      <h2>Conjuntos PRIMEROS</h2>
      <pre>
// ESTRUCTURA PRINCIPAL
P(Programa) = {#, int, float, char, void}
P(Preprocesador) = {#, ε}
P(DirectivaPreprocesador) = {#}
P(Biblioteca) = {<, "}
P(Valor) = {num, cadena, id}

// DECLARACIONES
P(Declaraciones) = {int, float, char, void, ε}
P(Declaracion) = {int, float, char, void}
P(DeclaracionVariable) = {int, float, char, void}
P(DeclaracionArreglo) = {int, float, char, void}
P(DeclaracionPuntero) = {int, float, char, void}
P(DeclaracionFuncion) = {int, float, char, void}

// TIPOS
P(Tipo) = {int, float, char, void}
P(TipoBasico) = {int, float, char, void}
P(Modificador) = {*, ε}
P(TipoRetorno) = {int, float, char, void}

// LISTAS Y VARIABLES
P(ListaIdentificadores) = {id}
P(MoreIds) = {,, ε}
P(InicializacionOpcional) = {=, ε}
P(ListaValores) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
P(Variable) = {id, *}

// FUNCIONES
P(FuncionPrincipal) = {int, float, char, void}
P(OtrasFunciones) = {int, float, char, void, ε}
P(Funcion) = {int, float, char, void}
P(Parametros) = {int, float, char, void, ε}
P(ListaParametros) = {int, float, char, void}
P(Parametro) = {int, float, char, void}
P(CuerpoFuncion) = {int, float, char, void, id, *, ++, --, ;, if, while, for, do, switch, {, ε}
P(DeclaracionesLocales) = {int, float, char, void, ε}

// SENTENCIAS
P(ListaSentencias) = {id, *, ++, --, ;, if, while, for, do, switch, {, ε}
P(Sentencia) = {id, *, ++, --, ;, if, while, for, do, switch, {}
P(SentenciaSimple) = {id, *, ++, --, ;}
P(SentenciaControl) = {if, while, for, do, switch}
P(BloqueCompuesto) = {{}

// ASIGNACIONES
P(Asignacion) = {id, *}
P(OperadorAsignacion) = {=, +=, -=, *=, /=, %=}
P(ExpresionIncDec) = {id, *, ++, --}

// EXPRESIONES
P(Expresion) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
P(ExpresionLogica) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
P(ExpresionAnd) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
P(ExpresionIgualdad) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
P(ExpresionRelacional) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
P(ExpresionAditiva) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
P(ExpresionMultiplicativa) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
P(ExpresionUnaria) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
P(ExpresionPostfija) = {id, num, caracter, cadena, (}
P(ExpresionPrimaria) = {id, num, caracter, cadena, (}

// OPERADORES
P(OperadorIgualdad) = {==, !=}
P(OperadorRelacional) = {<, >, <=, >=}
P(OperadorAditivo) = {+, -}
P(OperadorMultiplicativo) = {*, /, %}
P(OperadorUnario) = {+, -, !, *, &}

// ESTRUCTURAS DE CONTROL
P(If) = {if}
P(ElseOpcional) = {else, ε}
P(While) = {while}
P(For) = {for}
P(DoWhile) = {do}
P(Switch) = {switch}
P(Condicion) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}

// ELEMENTOS DE CONTROL
P(InicializacionFor) = {id, *, int, float, char, void, ε}
P(CondicionFor) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --, ε}
P(ActualizacionFor) = {id, *, ++, --, ε}
P(ListaCasos) = {case, ε}
P(Caso) = {case}
P(CasoDefaultOpcional) = {default, ε}
P(BreakOpcional) = {break, ε}

// FUNCIONES Y LLAMADAS
P(LlamadaFuncion) = {id}
P(ArgumentosOpcionales) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --, ε}
P(ListaArgumentos) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
P(Argumento) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}

// RETURN
P(Return) = {return}
P(ReturnOpcional) = {return, ε}

// FUNCIONES DE E/S
P(Print) = {printf}
P(Scanf) = {scanf}
P(FormatoCadena) = {cadena}
P(DireccionVariable) = {&, id, *}
  </pre>
    </div>

    <div class="seccion">
      <h2>Conjuntos SIGUIENTES</h2>
      <pre>
// ESTRUCTURA PRINCIPAL
S(Programa) = {$}
S(Preprocesador) = {int, float, char, void}
S(DirectivaPreprocesador) = {#, int, float, char, void}
S(Biblioteca) = {#, int, float, char, void}
S(Valor) = {#, int, float, char, void}

// DECLARACIONES
S(Declaraciones) = {int, float, char, void}
S(Declaracion) = {int, float, char, void, id, *, ++, --, ;, if, while, for, do, switch, {, return, }}
S(DeclaracionVariable) = {int, float, char, void, id, *, ++, --, ;, if, while, for, do, switch, {, return, }}
S(DeclaracionArreglo) = {int, float, char, void, id, *, ++, --, ;, if, while, for, do, switch, {, return, }}
S(DeclaracionPuntero) = {int, float, char, void, id, *, ++, --, ;, if, while, for, do, switch, {, return, }}
S(DeclaracionFuncion) = {int, float, char, void, id, *, ++, --, ;, if, while, for, do, switch, {, return, }}

// TIPOS
S(Tipo) = {id, )}
S(TipoBasico) = {*, id, )}
S(Modificador) = {id, )}
S(TipoRetorno) = {main, id}

// LISTAS Y VARIABLES
S(ListaIdentificadores) = {;}
S(MoreIds) = {;}
S(InicializacionOpcional) = {,, ;}
S(ListaValores) = {}}
S(Variable) = {=, +=, -=, *=, /=, %=, ++, --, ), ;, ,, ], ||, &&, ==, !=, <, >, <=, >=, +, -, *, /, %}

// FUNCIONES
S(FuncionPrincipal) = {int, float, char, void, $}
S(OtrasFunciones) = {$}
S(Funcion) = {int, float, char, void, $}
S(Parametros) = {)}
S(ListaParametros) = {)}
S(Parametro) = {,, )}
S(CuerpoFuncion) = {return, }}
S(DeclaracionesLocales) = {id, *, ++, --, ;, if, while, for, do, switch, {, return}

// SENTENCIAS
S(ListaSentencias) = {}, case, default, return}
S(Sentencia) = {id, *, ++, --, ;, if, while, for, do, switch, {, }, case, default, return, else}
S(SentenciaSimple) = {id, *, ++, --, ;, if, while, for, do, switch, {, }, case, default, return, else}
S(SentenciaControl) = {id, *, ++, --, ;, if, while, for, do, switch, {, }, case, default, return, else}
S(BloqueCompuesto) = {id, *, ++, --, ;, if, while, for, do, switch, {, }, case, default, return, else}

// ASIGNACIONES
S(Asignacion) = {;, )}
S(OperadorAsignacion) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
S(ExpresionIncDec) = {;, )}

// EXPRESIONES
S(Expresion) = {), ;, ,, ], :}
S(ExpresionLogica) = {), ;, ,, ], :}
S(ExpresionAnd) = {||, ), ;, ,, ], :}
S(ExpresionIgualdad) = {&&, ||, ), ;, ,, ], :}
S(ExpresionRelacional) = {==, !=, &&, ||, ), ;, ,, ], :}
S(ExpresionAditiva) = {<, >, <=, >=, ==, !=, &&, ||, ), ;, ,, ], :}
S(ExpresionMultiplicativa) = {+, -, <, >, <=, >=, ==, !=, &&, ||, ), ;, ,, ], :}
S(ExpresionUnaria) = {*, /, %, +, -, <, >, <=, >=, ==, !=, &&, ||, ), ;, ,, ], :}
S(ExpresionPostfija) = {*, /, %, +, -, <, >, <=, >=, ==, !=, &&, ||, ), ;, ,, ], :}
S(ExpresionPrimaria) = {[, (, ++, --, *, /, %, +, -, <, >, <=, >=, ==, !=, &&, ||, ), ;, ,, ], :}

// OPERADORES
S(OperadorIgualdad) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
S(OperadorRelacional) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
S(OperadorAditivo) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
S(OperadorMultiplicativo) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}
S(OperadorUnario) = {id, num, caracter, cadena, (, +, -, !, *, &, ++, --}

// ESTRUCTURAS DE CONTROL
S(If) = {id, *, ++, --, ;, if, while, for, do, switch, {, }, case, default, return, else}
S(ElseOpcional) = {id, *, ++, --, ;, if, while, for, do, switch, {, }, case, default, return}
S(While) = {id, *, ++, --, ;, if, while, for, do, switch, {, }, case, default, return, else}
S(For) = {id, *, ++, --, ;, if, while, for, do, switch, {, }, case, default, return, else}
S(DoWhile) = {id, *, ++, --, ;, if, while, for, do, switch, {, }, case, default, return, else}
S(Switch) = {id, *, ++, --, ;, if, while, for, do, switch, {, }, case, default, return, else}
S(Condicion) = {), ;}

// ELEMENTOS DE CONTROL
S(InicializacionFor) = {;}
S(CondicionFor) = {;}
S(ActualizacionFor) = {)}
S(ListaCasos) = {default, }}
S(Caso) = {case, default, }}
S(CasoDefaultOpcional) = {}}
S(BreakOpcional) = {case, default, }}

// FUNCIONES Y LLAMADAS
S(LlamadaFuncion) = {;, ), ,, ], ||, &&, ==, !=, <, >, <=, >=, +, -, *, /, %}
S(ArgumentosOpcionales) = {)}
S(ListaArgumentos) = {)}
S(Argumento) = {,, )}

// RETURN
S(Return) = {}}
S(ReturnOpcional) = {}}

// FUNCIONES DE E/S
S(Print) = {;, ), ,, ], ||, &&, ==, !=, <, >, <=, >=, +, -, *, /, %}
S(Scanf) = {;, ), ,, ], ||, &&, ==, !=, <, >, <=, >=, +, -, *, /, %}
S(FormatoCadena) = {), ,}
S(DireccionVariable) = {)}
  </pre>
    </div>

    <div class="container">
      <h1>Tabla LL(1) - Compilador C Simplificado</h1>

      <div class="descripcion">
        <strong>Proposito Educativo:</strong> Esta tabla representa los elementos mas importantes del analizador
        sintactico LL(1)
        para un subconjunto del lenguaje C. Cada celda contiene la produccion a aplicar cuando se encuentra el
        no terminal (fila) y el terminal (columna).
      </div>

      <table>
        <thead>
          <tr>
            <th class="no-terminal">No Terminal</th>
            <th>int/float/char/void</th>
            <th>main</th>
            <th>id</th>
            <th>num</th>
            <th>(</th>
            <th>)</th>
            <th>{</th>
            <th>}</th>
            <th>;</th>
            <th>=</th>
            <th>+</th>
            <th>*</th>
            <th>if</th>
            <th>while</th>
            <th>return</th>
            <th>$</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="no-terminal">Programa</td>
            <td class="produccion">P → Declaraciones FuncionPrincipal</td>
            <td class="produccion">P → FuncionPrincipal</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="epsilon">ε</td>
          </tr>
          <tr>
            <td class="no-terminal">Declaraciones</td>
            <td class="produccion">D → Declaracion Declaraciones</td>
            <td class="epsilon">ε</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="epsilon">ε</td>
          </tr>
          <tr>
            <td class="no-terminal">FuncionPrincipal</td>
            <td class="produccion">FP → Tipo main ( ) { Sentencias return }</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
          </tr>
          <tr>
            <td class="no-terminal">Declaracion</td>
            <td class="produccion">D → Tipo id ;</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
          </tr>
          <tr>
            <td class="no-terminal">Sentencias</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="produccion">S → Sentencia Sentencias</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="epsilon">ε</td>
            <td class="produccion">S → Sentencia Sentencias</td>
            <td class="epsilon">ε</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="produccion">S → Sentencia Sentencias</td>
            <td class="produccion">S → Sentencia Sentencias</td>
            <td class="epsilon">ε</td>
            <td class="vacio">-</td>
          </tr>
          <tr>
            <td class="no-terminal">Sentencia</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="produccion">S → id = Expresion ;</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="produccion">S → { Sentencias }</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="produccion">S → if ( Expresion ) Sentencia</td>
            <td class="produccion">S → while ( Expresion ) Sentencia</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
          </tr>
          <tr>
            <td class="no-terminal">Expresion</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="produccion">E → Termino</td>
            <td class="produccion">E → Termino</td>
            <td class="produccion">E → ( Expresion )</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
          </tr>
          <tr>
            <td class="no-terminal">Termino</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="produccion">T → Factor</td>
            <td class="produccion">T → Factor</td>
            <td class="produccion">T → Factor</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
          </tr>
          <tr>
            <td class="no-terminal">Factor</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="produccion">F → id</td>
            <td class="produccion">F → num</td>
            <td class="produccion">F → ( Expresion )</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
            <td class="vacio">-</td>
          </tr>
        </tbody>
      </table>

      <div class="leyenda">
        <h3>Leyenda:</h3>
        <span class="leyenda-item produccion">Produccion a aplicar</span>
        <span class="leyenda-item epsilon">ε (cadena vacia)</span>
        <span class="leyenda-item vacio">- (entrada vacia/error)</span>
        <p><strong>Nota:</strong> Esta es una tabla LL1 en version simplificada para el entendimiento de la Gramatica
        </p>
      </div>

      <div class="analisis-ejemplo">
        <h2>Ejemplo de Analisis Sintactico LL(1)</h2>

        <div class="codigo-ejemplo">
          <h3>Codigo de entrada (simplificado):</h3>
          <pre><code>int main()
{
    id = num;
    return num;
}</code></pre>

        </div>

        <div class="cadena-tokens">
          <h3>Cadena de tokens:</h3>
          <p><strong>Entrada:</strong> int main ( ) { id = num ; return num ; } $</p>
        </div>

        <div class="tabla-analisis">
          <h3>Proceso de analisis paso a paso:</h3>
          <table class="analisis-table">
            <thead>
              <tr>
                <th>Paso</th>
                <th>Pila</th>
                <th>Entrada</th>
                <th>Accion</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>1</td>
                <td>$ Programa</td>
                <td>int main ( ) { id = num ; return num ; } $</td>
                <td>P → Declaraciones FuncionPrincipal</td>
              </tr>
              <tr>
                <td>2</td>
                <td>$ FuncionPrincipal Declaraciones</td>
                <td>int main ( ) { id = num ; return num ; } $</td>
                <td>Declaraciones → ε</td>
              </tr>
              <tr>
                <td>3</td>
                <td>$ FuncionPrincipal</td>
                <td>int main ( ) { id = num ; return num ; } $</td>
                <td>FP → Tipo main ( ) { Sentencias return }</td>
              </tr>
              <tr>
                <td>4</td>
                <td>$ } return Sentencias { ) ( main Tipo</td>
                <td>int main ( ) { id = num ; return num ; } $</td>
                <td>Tipo → int (match)</td>
              </tr>
              <tr>
                <td>5</td>
                <td>$ } return Sentencias { ) ( main</td>
                <td>main ( ) { id = num ; return num ; } $</td>
                <td>main (match)</td>
              </tr>
              <tr>
                <td>6</td>
                <td>$ } return Sentencias { ) (</td>
                <td>( ) { id = num ; return num ; } $</td>
                <td>( (match)</td>
              </tr>
              <tr>
                <td>7</td>
                <td>$ } return Sentencias { )</td>
                <td>) { id = num ; return num ; } $</td>
                <td>) (match)</td>
              </tr>
              <tr>
                <td>8</td>
                <td>$ } return Sentencias {</td>
                <td>{ id = num ; return num ; } $</td>
                <td>{ (match)</td>
              </tr>
              <tr>
                <td>9</td>
                <td>$ } return Sentencias</td>
                <td>id = num ; return num ; } $</td>
                <td>S → Sentencia Sentencias</td>
              </tr>
              <tr>
                <td>10</td>
                <td>$ } return Sentencias Sentencia</td>
                <td>id = num ; return num ; } $</td>
                <td>S → id = Expresion ;</td>
              </tr>
              <tr>
                <td>11</td>
                <td>$ } return Sentencias ; Expresion = id</td>
                <td>id = num ; return num ; } $</td>
                <td>id (match)</td>
              </tr>
              <tr>
                <td>12</td>
                <td>$ } return Sentencias ; Expresion =</td>
                <td>= num ; return num ; } $</td>
                <td>= (match)</td>
              </tr>
              <tr>
                <td>13</td>
                <td>$ } return Sentencias ; Expresion</td>
                <td>num ; return num ; } $</td>
                <td>E → Termino</td>
              </tr>
              <tr>
                <td>14</td>
                <td>$ } return Sentencias ; Termino</td>
                <td>num ; return num ; } $</td>
                <td>T → Factor</td>
              </tr>
              <tr>
                <td>15</td>
                <td>$ } return Sentencias ; Factor</td>
                <td>num ; return num ; } $</td>
                <td>F → num</td>
              </tr>
              <tr>
                <td>16</td>
                <td>$ } return Sentencias ; num</td>
                <td>num ; return num ; } $</td>
                <td>num (match)</td>
              </tr>
              <tr>
                <td>17</td>
                <td>$ } return Sentencias ;</td>
                <td>; return num ; } $</td>
                <td>; (match)</td>
              </tr>
              <tr>
                <td>18</td>
                <td>$ } return Sentencias</td>
                <td>return num ; } $</td>
                <td>Sentencias → ε</td>
              </tr>
              <tr>
                <td>19</td>
                <td>$ } return</td>
                <td>return num ; } $</td>
                <td>return (match)</td>
              </tr>
              <tr>
                <td>20</td>
                <td>$ }</td>
                <td>num ; } $</td>
                <td>num (match) - return implicito</td>
              </tr>
              <tr>
                <td>21</td>
                <td>$ }</td>
                <td>; } $</td>
                <td>; (match) - return implicito</td>
              </tr>
              <tr>
                <td>22</td>
                <td>$ }</td>
                <td>} $</td>
                <td>} (match)</td>
              </tr>
              <tr>
                <td>23</td>
                <td>$</td>
                <td>$</td>
                <td><strong>ACEPTADO</strong> ✓</td>
              </tr>
            </tbody>
          </table>
        </div>

        <div class="explicacion-analisis">
          <h3>Explicacion del proceso:</h3>
          <ul>
            <li><strong>Pila:</strong> Contiene los simbolos por procesar (se lee de derecha a izquierda)</li>
            <li><strong>Entrada:</strong> Los tokens restantes por analizar</li>
            <li><strong>Accion:</strong> La produccion aplicada o si se hace match con un terminal</li>
            <li><strong>ε (epsilon):</strong> Indica que se aplica una produccion vacia</li>
            <li><strong>Match:</strong> Se consume un terminal de la entrada y se quita de la pila</li>
          </ul>
          <p><strong>Resultado:</strong> El analisis termina exitosamente cuando tanto la pila como la entrada solo
        contienen el simbolo $.</p>
    <br>
    <div class="analisis-ejemplo">
      <h2>Diagrama de Conway</h2>

    </div>
    <p>Gramatica de Lenguaje C Simplificado </p>
    <div class="content">
      <!-- Programa Principal -->
      <div class="diagram-section">
        <div class="diagram-title">Programa</div>
        <div class="railroad">
          <div class="rail-element optional">Preprocesador</div>
          <div class="connector">→</div>
          <div class="rail-element optional">Declaraciones</div>
          <div class="connector">→</div>
          <div class="rail-element non-terminal">FuncionPrincipal</div>
          <div class="connector">→</div>
          <div class="rail-element optional">OtrasFunciones</div>
        </div>
        <div class="explanation">
          <strong>Estructura basica:</strong> Un programa C puede tener directivas de preprocesador, declaraciones
          globales, la funcion main (obligatoria) y otras funciones adicionales.
        </div>
      </div>

      <!-- Funcion Principal -->
      <div class="diagram-section">
        <div class="diagram-title">Funcion Principal</div>
        <div class="railroad">
          <div class="rail-element choice">TipoRetorno</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">main</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">(</div>
          <div class="connector">→</div>
          <div class="rail-element optional">Parametros</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">)</div>
          <div class="connector">→</div>
          <div class="rail-element non-terminal">BloqueCompuesto</div>
        </div>

        <div class="branch">
          <div class="diagram-title" style="font-size: 1.1em;">TipoRetorno</div>
          <div class="branch-line">
            <div class="railroad">
              <div class="rail-element choice terminal">int</div>
              <div class="connector">|</div>
              <div class="rail-element choice terminal">float</div>
              <div class="connector">|</div>
              <div class="rail-element choice terminal">char</div>
              <div class="connector">|</div>
              <div class="rail-element choice terminal">void</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Declaraciones -->
      <div class="diagram-section">
        <div class="diagram-title">Declaracion de Variables</div>
        <div class="railroad">
          <div class="rail-element non-terminal">Tipo</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">id</div>
          <div class="connector">→</div>
          <div class="rail-element optional">Inicializacion</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">;</div>
        </div>

        <div class="branch">
          <div class="diagram-title" style="font-size: 1.1em;">Inicializacion (Opcional)</div>
          <div class="branch-line">
            <div class="railroad">
              <div class="rail-element terminal">=</div>
              <div class="connector">→</div>
              <div class="rail-element non-terminal">Expresion</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Sentencias -->
      <div class="diagram-section">
        <div class="diagram-title">Sentencias</div>
        <div class="railroad">
          <div class="rail-element repetition">Sentencia</div>
        </div>

        <div class="branch">
          <div class="diagram-title" style="font-size: 1.1em;">Tipos de Sentencia</div>
          <div class="branch-line">
            <div class="railroad">
              <div class="rail-element choice non-terminal">Asignacion</div>
              <div class="connector">|</div>
              <div class="rail-element choice non-terminal">If</div>
              <div class="connector">|</div>
              <div class="rail-element choice non-terminal">While</div>
              <div class="connector">|</div>
              <div class="rail-element choice non-terminal">For</div>
              <div class="connector">|</div>
              <div class="rail-element choice non-terminal">BloqueCompuesto</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Expresiones -->
      <div class="diagram-section">
        <div class="diagram-title">Expresiones (Jerarquia de Operadores)</div>
        <div class="railroad">
          <div class="rail-element non-terminal">ExpresionLogica</div>
        </div>

        <div class="branch">
          <div class="diagram-title" style="font-size: 1.1em;">Jerarquia (de mayor a menor precedencia)</div>
          <div class="branch-line">
            <div class="railroad" style="flex-direction: column; align-items: flex-start; gap: 10px;">
              <div style="display: flex; align-items: center; gap: 10px;">
                <div class="rail-element choice">1. ExpresionPrimaria</div>
                <span style="color: #7f8c8d;">→ id, num, (expresion)</span>
              </div>
              <div style="display: flex; align-items: center; gap: 10px;">
                <div class="rail-element choice">2. ExpresionUnaria</div>
                <span style="color: #7f8c8d;">→ +, -, !, *, &</span>
              </div>
              <div style="display: flex; align-items: center; gap: 10px;">
                <div class="rail-element choice">3. ExpresionMultiplicativa</div>
                <span style="color: #7f8c8d;">→ *, /, %</span>
              </div>
              <div style="display: flex; align-items: center; gap: 10px;">
                <div class="rail-element choice">4. ExpresionAditiva</div>
                <span style="color: #7f8c8d;">→ +, -</span>
              </div>
              <div style="display: flex; align-items: center; gap: 10px;">
                <div class="rail-element choice">5. ExpresionRelacional</div>
                <span style="color: #7f8c8d;">→ <,>, <=,>=</span>
              </div>
              <div style="display: flex; align-items: center; gap: 10px;">
                <div class="rail-element choice">6. ExpresionLogica</div>
                <span style="color: #7f8c8d;">→ &&, ||</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Estructuras de Control -->
      <div class="diagram-section">
        <div class="diagram-title">Estructura If</div>
        <div class="railroad">
          <div class="rail-element terminal">if</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">(</div>
          <div class="connector">→</div>
          <div class="rail-element non-terminal">Condicion</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">)</div>
          <div class="connector">→</div>
          <div class="rail-element non-terminal">Sentencia</div>
          <div class="connector">→</div>
          <div class="rail-element optional">else Sentencia</div>
        </div>
      </div>

      <div class="diagram-section">
        <div class="diagram-title">Estructura While</div>
        <div class="railroad">
          <div class="rail-element terminal">while</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">(</div>
          <div class="connector">→</div>
          <div class="rail-element non-terminal">Condicion</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">)</div>
          <div class="connector">→</div>
          <div class="rail-element non-terminal">Sentencia</div>
        </div>
      </div>

      <!-- Bloque Compuesto -->
      <div class="diagram-section">
        <div class="diagram-title">Bloque Compuesto</div>
        <div class="railroad">
          <div class="rail-element terminal">{</div>
          <div class="connector">→</div>
          <div class="rail-element optional">DeclaracionesLocales</div>
          <div class="connector">→</div>
          <div class="rail-element repetition">Sentencia</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">}</div>
        </div>
        <div class="explanation">
          <strong>Bloque Compuesto:</strong> Agrupa multiples sentencias entre llaves. Puede contener declaraciones
          locales seguidas de sentencias ejecutables.
        </div>
      </div>

      <!-- Asignacion -->
      <div class="diagram-section">
        <div class="diagram-title">Asignacion</div>
        <div class="railroad">
          <div class="rail-element non-terminal">Variable</div>
          <div class="connector">→</div>
          <div class="rail-element choice">OperadorAsignacion</div>
          <div class="connector">→</div>
          <div class="rail-element non-terminal">Expresion</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">;</div>
        </div>

        <div class="branch">
          <div class="diagram-title" style="font-size: 1.1em;">Variable</div>
          <div class="branch-line">
            <div class="railroad">
              <div class="rail-element choice terminal">id</div>
              <div class="connector">|</div>
              <div class="rail-element choice">id[Expresion]</div>
              <div class="connector">|</div>
              <div class="rail-element choice">*id</div>
              <div class="connector">|</div>
              <div class="rail-element choice">id.id</div>
            </div>
          </div>
        </div>

        <div class="branch">
          <div class="diagram-title" style="font-size: 1.1em;">Operadores de Asignacion</div>
          <div class="branch-line">
            <div class="railroad">
              <div class="rail-element choice terminal">=</div>
              <div class="connector">|</div>
              <div class="rail-element choice terminal">+=</div>
              <div class="connector">|</div>
              <div class="rail-element choice terminal">-=</div>
              <div class="connector">|</div>
              <div class="rail-element choice terminal">*=</div>
              <div class="connector">|</div>
              <div class="rail-element choice terminal">/=</div>
            </div>
          </div>
        </div>
      </div>

      <!-- For Loop -->
      <div class="diagram-section">
        <div class="diagram-title">Estructura For</div>
        <div class="railroad">
          <div class="rail-element terminal">for</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">(</div>
          <div class="connector">→</div>
          <div class="rail-element optional">Inicializacion</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">;</div>
          <div class="connector">→</div>
          <div class="rail-element optional">Condicion</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">;</div>
          <div class="connector">→</div>
          <div class="rail-element optional">Actualizacion</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">)</div>
          <div class="connector">→</div>
          <div class="rail-element non-terminal">Sentencia</div>
        </div>
        <div class="explanation">
          <strong>Estructura For:</strong> Todas las partes (inicializacion, condicion, actualizacion) son opcionales,
          permitiendo bucles infinitos o configuraciones personalizadas.
        </div>
      </div>

      <!-- Switch -->
      <div class="diagram-section">
        <div class="diagram-title">Estructura Switch</div>
        <div class="railroad">
          <div class="rail-element terminal">switch</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">(</div>
          <div class="connector">→</div>
          <div class="rail-element non-terminal">Expresion</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">)</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">{</div>
          <div class="connector">→</div>
          <div class="rail-element repetition">Caso</div>
          <div class="connector">→</div>
          <div class="rail-element optional">default</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">}</div>
        </div>

        <div class="branch">
          <div class="diagram-title" style="font-size: 1.1em;">Caso</div>
          <div class="branch-line">
            <div class="railroad">
              <div class="rail-element terminal">case</div>
              <div class="connector">→</div>
              <div class="rail-element non-terminal">Expresion</div>
              <div class="connector">→</div>
              <div class="rail-element terminal">:</div>
              <div class="connector">→</div>
              <div class="rail-element repetition">Sentencia</div>
              <div class="connector">→</div>
              <div class="rail-element optional">break;</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Llamadas a Funcion -->
      <div class="diagram-section">
        <div class="diagram-title">Llamada a Funcion</div>
        <div class="railroad">
          <div class="rail-element terminal">id</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">(</div>
          <div class="connector">→</div>
          <div class="rail-element optional">Argumentos</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">)</div>
        </div>

        <div class="branch">
          <div class="diagram-title" style="font-size: 1.1em;">Lista de Argumentos</div>
          <div class="branch-line">
            <div class="railroad">
              <div class="rail-element non-terminal">Expresion</div>
              <div class="connector">→</div>
              <div class="rail-element repetition">, Expresion</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Declaracion de Arreglos -->
      <div class="diagram-section">
        <div class="diagram-title">Declaracion de Arreglos</div>
        <div class="railroad">
          <div class="rail-element non-terminal">Tipo</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">id</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">[</div>
          <div class="connector">→</div>
          <div class="rail-element optional">num</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">]</div>
          <div class="connector">→</div>
          <div class="rail-element optional">Inicializacion</div>
          <div class="connector">→</div>
          <div class="rail-element terminal">;</div>
        </div>

        <div class="branch">
          <div class="diagram-title" style="font-size: 1.1em;">Inicializacion de Arreglo</div>
          <div class="branch-line">
            <div class="railroad">
              <div class="rail-element terminal">=</div>
              <div class="connector">→</div>
              <div class="rail-element terminal">{</div>
              <div class="connector">→</div>
              <div class="rail-element non-terminal">Expresion</div>
              <div class="connector">→</div>
              <div class="rail-element repetition">, Expresion</div>
              <div class="connector">→</div>
              <div class="rail-element terminal">}</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Preprocesador -->
      <div class="diagram-section">
        <div class="diagram-title">Directivas de Preprocesador</div>
        <div class="railroad">
          <div class="rail-element terminal">#</div>
          <div class="connector">→</div>
          <div class="rail-element choice">Directiva</div>
        </div>

        <div class="branch">
          <div class="diagram-title" style="font-size: 1.1em;">Tipos de Directivas</div>
          <div class="branch-line">
            <div class="railroad" style="flex-direction: column; align-items: flex-start; gap: 10px;">
              <div style="display: flex; align-items: center; gap: 10px;">
                <div class="rail-element choice terminal">include</div>
                <div class="connector">→</div>
                <div class="rail-element choice">&lt;biblioteca.h&gt;</div>
                <span style="color: #7f8c8d;">o</span>
                <div class="rail-element choice">"biblioteca.h"</div>
              </div>
              <div style="display: flex; align-items: center; gap: 10px;">
                <div class="rail-element choice terminal">define</div>
                <div class="connector">→</div>
                <div class="rail-element terminal">id</div>
                <div class="connector">→</div>
                <div class="rail-element choice">Valor</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Leyenda -->
      <div class="legend">
        <h3>Leyenda de Elementos</h3>
        <div class="legend-items">
          <div class="legend-item">
            <div class="legend-sample terminal">terminal</div>
            <span>Simbolos terminales (palabras clave, operadores)</span>
          </div>
          <div class="legend-item">
            <div class="legend-sample non-terminal">NoTerminal</div>
            <span>Simbolos no terminales (reglas de gramatica)</span>
          </div>
          <div class="legend-item">
            <div class="legend-sample optional">Opcional</div>
            <span>Elementos opcionales (pueden omitirse)</span>
          </div>
          <div class="legend-item">
            <div class="legend-sample repetition">Repeticion</div>
            <span>Elementos que pueden repetirse (0 o mas veces)</span>
          </div>
          <div class="legend-item">
            <div class="legend-sample choice">Eleccion</div>
            <span>Alternativas (se elige una opcion)</span>
          </div>
          <div class="legend-item">
            <div class="connector">→</div>
            <span>Secuencia (elementos en orden)</span>
          </div>
          <div class="legend-item">
            <div class="connector">|</div>
            <span>Disyuncion (O logico)</span>
          </div>
        </div>

        <div class="explanation" style="margin-top: 20px;">
          <strong>Nota:</strong> Este diagrama muestra una version simplificada y educativa de la gramatica de C.
          Los diagramas de Conway (o de sintaxis)srepresentar las reglas de produccion
          de una gramatica, facilitando la comprension del flujo sintactico del lenguaje.
        </div>
      </div>
    </div>
  </div>
</body>

</html>